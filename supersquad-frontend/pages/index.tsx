import { useState } from "react";
import Head from "next/head";
import { useChain } from "@cosmos-kit/react";
import { StdFee } from "@cosmjs/amino";
import { SigningStargateClient } from "@cosmjs/stargate";
import BigNumber from "bignumber.js";

// import { Inter } from "next/font/google";
import styled from "styled-components";
import { useRouter } from "next/router";

import {
  Box,
  Divider,
  Grid,
  Heading,
  Text,
  Stack,
  Link,
  Button,
  Flex,
  Icon,
  useColorMode,
  Center,
} from "@chakra-ui/react";
import { BsFillMoonStarsFill, BsFillSunFill } from "react-icons/bs";
import {
  chainassets,
  chainName,
  coin,
  dependencies,
  products,
} from "../config";

import { WalletStatus } from "@cosmos-kit/core";
import {
  Product,
  Dependency,
  WalletSection,
  handleChangeColorModeValue,
} from "../components";
import { SendTokensCard } from "../components/react/send-tokens-card";

import { cosmos } from "osmojs";

const library = {
  title: "OsmoJS",
  text: "OsmoJS",
  href: "https://github.com/osmosis-labs/osmojs",
};

const sendTokens = (
  getSigningStargateClient: () => Promise<SigningStargateClient>,
  setResp: (resp: string) => any,
  address: string
) => {
  return async () => {
    const stargateClient = await getSigningStargateClient();
    if (!stargateClient || !address) {
      console.error("stargateClient undefined or address undefined.");
      return;
    }

    const { send } = cosmos.bank.v1beta1.MessageComposer.withTypeUrl;

    const msg = send({
      amount: [
        {
          denom: coin.base,
          amount: "1000",
        },
      ],
      toAddress: address,
      fromAddress: address,
    });

    const fee: StdFee = {
      amount: [
        {
          denom: coin.base,
          amount: "2000",
        },
      ],
      gas: "86364",
    };
    const response = await stargateClient.signAndBroadcast(address, [msg], fee);
    setResp(JSON.stringify(response, null, 2));
  };
};

export default function Home() {
  const { colorMode, toggleColorMode } = useColorMode();

  const { getSigningStargateClient, address, status, getRpcEndpoint } =
    useChain("osmosis");

  const [balance, setBalance] = useState(new BigNumber(0));
  const [isFetchingBalance, setFetchingBalance] = useState(false);
  const [resp, setResp] = useState("");
  const getBalance = async () => {
    if (!address) {
      setBalance(new BigNumber(0));
      setFetchingBalance(false);
      return;
    }

    let rpcEndpoint = await getRpcEndpoint();

    if (!rpcEndpoint) {
      console.log("no rpc endpoint — using a fallback");
      rpcEndpoint = `https://rpc.cosmos.directory/${chainName}`;
    }

    // get RPC client
    const client = await cosmos.ClientFactory.createRPCQueryClient({
      rpcEndpoint,
    });

    // fetch balance
    const balance = await client.cosmos.bank.v1beta1.balance({
      address,
      denom: chainassets?.assets[0].base as string,
    });

    // Get the display exponent
    // we can get the exponent from chain registry asset denom_units
    const exp = coin.denom_units.find((unit) => unit.denom === coin.display)
      ?.exponent as number;

    // show balance in display values by exponentiating it
    const a = new BigNumber(balance.balance.amount);
    const amount = a.multipliedBy(10 ** -exp);
    setBalance(amount);
    setFetchingBalance(false);
  };

  return (
    <>
      <Head>
        <title>Super Squad</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <HomePage />

      {/* <Flex justifyContent="end" mb={4}>
        <Button variant="outline" px={0} onClick={toggleColorMode}>
          <Icon
            as={handleChangeColorModeValue(
              colorMode,
              BsFillMoonStarsFill,
              BsFillSunFill
            )}
          />
        </Button>
      </Flex> */}
      {/* <Box textAlign="center">
        <Heading
          as="h1"
          fontSize={{ base: "3xl", md: "5xl" }}
          fontWeight="extrabold"
          mb={3}
        >
          Create Cosmos App
        </Heading>
        <Heading
          as="h1"
          fontWeight="bold"
          fontSize={{ base: "2xl", md: "4xl" }}
        >
          <Text as="span">Welcome to&nbsp;</Text>
          <Text
            as="span"
            color={handleChangeColorModeValue(
              colorMode,
              "primary.500",
              "primary.200"
            )}
          >
            CosmosKit&nbsp;+&nbsp;Next.js&nbsp;+&nbsp;
            <Link href={library.href} target="_blank" rel="noreferrer">
              {library.title}
            </Link>
          </Text>
        </Heading>
      </Box> */}

      {/* <Center mb={16}>
        <SendTokensCard
          isConnectWallet={status === WalletStatus.Connected}
          balance={balance.toNumber()}
          isFetchingBalance={isFetchingBalance}
          response={resp}
          sendTokensButtonText="Send Tokens"
          handleClickSendTokens={sendTokens(
            getSigningStargateClient as () => Promise<SigningStargateClient>,
            setResp as () => any,
            address as string
          )}
          handleClickGetBalance={() => {
            setFetchingBalance(true);
            getBalance();
          }}
        />
      </Center> */}

      {/* <Box mb={16}>
        <Divider />
      </Box>
      <Grid
        templateColumns={{
          md: "repeat(2, 1fr)",
          lg: "repeat(3, 1fr)",
        }}
        gap={8}
        mb={14}
      >
        {products.map((product) => (
          <Product key={product.title} {...product} />
        ))}
      </Grid>
      <Grid templateColumns={{ md: "repeat(3, 1fr)" }} gap={8} mb={20}>
        <Dependency {...library} />
        {dependencies.map((dependency) => (
          <Dependency key={dependency.title} {...dependency} />
        ))}
      </Grid> */}

      {/* <Box mb={3}>
        <Divider />
      </Box>
      <Stack
        isInline={true}
        spacing={1}
        justifyContent="center"
        opacity={0.5}
        fontSize="sm"
      >
        <Text>Built with</Text>
        <Link
          href="https://cosmology.tech/"
          target="_blank"
          rel="noopener noreferrer"
        >
          Cosmology
        </Link>
      </Stack> */}
    </>
  );
}

const HomePage = () => {
  const router = useRouter();
  return (
    <Container>
      <BackgroundImage src="/background.png" alt="onBoardingBackground" />
      <ContentWrapper>
        <Logo src="/superSquadLogo.svg" alt="superSquadLogo" height={55} />
        <ServiceDetailWrapper>
          Change Your Life With Your Friends <br />
          Real action-based SocialFi is here
        </ServiceDetailWrapper>
      </ContentWrapper>
      <div
        style={{
          width: "100%",
          height: "fit-content",
          zIndex: "3",
          display: "flex",
          justifyContent: "center",
          marginTop: "50px",
        }}
      >
        <WalletSection />
      </div>
      <BlackFixedButton
        onClick={() => {
          router.push("/forDemo");
        }}
      >
        Go
      </BlackFixedButton>
    </Container>
  );
};

const Container = styled.div`
  position: relative;
  width: 100%;
  height: fit-content; // Adjust based on your needs
  display: flex;
  flex-direction: column;
  align-items: center;
`;

const BackgroundImage = styled.img`
  position: absolute;
  top: 0px;
  left: 0px;
  z-index: 2;
  width: 100vw;
  height: 100vh;
`;

const ContentWrapper = styled.div`
  position: relative;
  z-index: 3;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: fit-content;
  margin-top: 270px;
`;

const Logo = styled.img`
  height: 55px;
`;

const ServiceDetailWrapper = styled.div`
  color: white;
  font-size: 20px;
  font-weight: 400;

  @media (max-width: 576px) {
    font-size: 18px;
    font-weight: 400;
    margin-top: 20px;
  }
  text-align: center;
`;

const BlackFixedButton = styled.div`
  /* @media (max-width: 2160px) {
    //PC
  } */
  @media (max-width: 576px) {
    width: 190px;
    height: 60px;

    border-radius: 20px;
    font-size: 18px;
    margin-top: 20px;
  }

  background-color: #121212;
  &:hover {
    background-color: #3a3a3a;
  }

  color: white;

  z-index: 3;

  font-weight: 500;

  display: flex;
  justify-content: center;
  align-items: center;

  text-align: center;
`;
